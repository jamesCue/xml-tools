datatypes xs = "http://www.w3.org/2001/XMLSchema-datatypes"
default namespace = "http://www.corbas.co.uk/ns/docxconvert"

start = dc.transformations | dc.flattened-transformation

# id attributes
dc.xml.id = attribute xml:id { xsd:ID }

# base attributes
dc.xml.base = attribute xml:base {xs:anyURI }

# Control if step output storage occurs. Can occur at any level. 
dc.store = attribute store { xs:boolean }

# Log file URI
dc.logfile = attribute logfile { xs:anyURI }

# The input stylesheet for a transformation
dc.stylesheet = attribute stylesheet { xs:anyURI }

# The readable name for log output
dc.name = attribute name { text }

# Output should be logged to this directory...
dc.output.path = attribute output.path { xs:anyURI }

# If the xml output file should not be named based on the transformation name, use this attribute
dc.output.filename = attribute output.filename { xs:anyURI }

# Common attributes.
dc.base.attribs = (dc.xml.base? & dc.xml.id? & dc.name & dc.output.path?)
dc.common.attribs = (dc.base.attribs & dc.store?)


dc.transformations.attributes = (dc.base.attribs & dc.store & dc.logfile)
dc.transformations.content = (dc.transformation | dc.transformation.group) +

# Top level element is 'transformations'.
dc.transformations = element transformations { dc.transformations.attributes, dc.transformations.content}

dc.transformation.group.attributes = (dc.common.attribs)
dc.transformation.group.content = (dc.transformation.group | dc.transformation)+

# Groups of transformations for convenience.
dc.transformation.group = element transformation.group { dc.transformation.group.attributes, dc.transformation.group.content }


dc.transformation.attributes = (dc.common.attribs & dc.stylesheet & dc.output.filename?)
dc.transformation.content = empty

# Each conversion in a transformations sequence defines a single XSLT
dc.transformation = element transformation { dc.transformation.attributes, dc.transformation.content }

# Flattened transformation attributes is a grouping of all the attributes in the hierarchy that apply
# to a single transformation.
dc.flattened-transformation.attributes =
	dc.xml.id &
	dc.xml.base &
	dc.name
	
	

# Flattened version of transformation used for processing within XProc
dc.flattened-transformation = element flattened-transformation { dc.transformation.content }